import streamlit as st
from groq import Groq
from datetime import datetime
from textwrap import dedent
import os
from io import BytesIO
from reportlab.lib.pagesizes import LETTER
from reportlab.pdfgen import canvas

client = Groq(api_key=os.environ["GROQ_API_KEY"])

def generate_research_report(topic: str, model: str, detail_level: str):
    today = datetime.now().strftime("%Y-%m-%d")
    detail_instructions = {
        "Concise": "Provide a brief summary with only the most essential points.",
        "Standard": "Include moderate detail, explaining the topic clearly and thoroughly.",
        "Comprehensive": "Provide an in-depth research report with rich technical and contextual detail.",
    }

    prompt = dedent(f"""
    You are Professor X-1000, a distinguished AI research scientist with expertise
    in analyzing and synthesizing complex information. Create a {detail_level.lower()} professional research
    report about "{topic}" with the following structure and detail:

    {detail_instructions[detail_level]}

    # {{Compelling Title That Captures the Topic's Essence}}

    ## Executive Summary
    {{Brief overview of key findings and significance}}

    ## Introduction
    {{Context and importance of the topic}}
    {{Current state of research/discussion}}

    ## Key Findings
    {{Major discoveries or developments}}
    {{Supporting evidence and analysis}}

    ## Implications
    {{Impact on field/society}}
    {{Future directions}}

    ## Key Takeaways
    - {{Bullet point 1}}
    - {{Bullet point 2}}
    - {{Bullet point 3}}

    ## References
    - [Source 1](link) - Key finding/quote
    - [Source 2](link) - Key finding/quote
    - [Source 3](link) - Key finding/quote

    ---
    Report generated by Professor X-1000
    Advanced Research Systems Division
    Date: {today}
    """)

    response = client.chat.completions.create(
        model=model,
        messages=[{"role": "user", "content": prompt}]
    )

    return response.choices[0].message.content

# Streamlit Layout
st.set_page_config(page_title="Research Report Generator", page_icon="üß†", layout="centered")
st.title("üß† Research Report Generator")
st.caption("(Groq-powered)")

# Top-centered search bar
topic = st.text_input("Enter your research topic:", key="search", placeholder="e.g., Renewable energy in India")

# Side-by-side model and detail selection
col1, col2 = st.columns([1, 1])

with col1:
    detail_level = st.radio("Select level of detail:", ["Concise", "Standard", "Comprehensive"], index=1)

with col2:
    model = st.selectbox("Select model:", ["llama3-70b-8192", "mixtral-8x7b-32768", "gemma-7b-it"])

if st.button("Generate Report", use_container_width=True):
    if topic.strip() == "":
        st.warning("Please enter a topic before generating the report.")
    else:
        with st.spinner("üîç Generating report..."):
            report = generate_research_report(topic, model, detail_level)
            st.markdown(report)

            # PDF generation
            pdf_buffer = BytesIO()
            pdf = canvas.Canvas(pdf_buffer, pagesize=LETTER)
            text = pdf.beginText(40, 750)
            text.setFont("Helvetica", 11)

            for line in report.split("\n"):
                text.textLine(line)
                if text.getY() < 40:
                    pdf.drawText(text)
                    pdf.showPage()
                    text = pdf.beginText(40, 750)
                    text.setFont("Helvetica", 11)

            pdf.drawText(text)
            pdf.save()
            pdf_buffer.seek(0)

            st.download_button(
                label="üìÑ Download Report as PDF",
                data=pdf_buffer,
                file_name=f"Research_Report_{topic.replace(' ', '_')}.pdf",
                mime="application/pdf"
            )
